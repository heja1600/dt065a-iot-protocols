# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import paho.mqtt.client as mqtt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTimer


class MessageWidget(QtWidgets.QWidget):
    def __init__ (self, message = None, index = 0 , on_click=None, parent= None):
        super(MessageWidget, self).__init__(parent)
        self.on_click = on_click
        self.message = message
        client_id=str(message["client"]._client_id)
        msg_count=int(message["userdata"].msg_count) if message["userdata"] != None else str(index)
        self.msg_count = QtWidgets.QLabel()
        self.msg_count.setText(msg_count)

        self.client_id = QtWidgets.QLabel()
        self.client_id.setText(client_id)

        self.allLayout  = QtWidgets.QHBoxLayout()
        self.allLayout.addWidget(self.msg_count, 0)
        self.allLayout.addWidget(self.client_id, 1)

        self.setLayout(self.allLayout)

    def mousePressEvent(self, event):
        self.on_click(self.message)


class TopicWidget(QtWidgets.QWidget):
    def __init__ (self, topic, parent = None, button_label="", button_click=None, on_click=None):
        super(TopicWidget, self).__init__(parent)
        self.on_click = on_click
        self.topic = topic

        
        self.topicLabel = QtWidgets.QLabel()
        self.topicLabel.setText(self.topic)

        self.button = QtWidgets.QPushButton()
        self.button.setText(button_label)
        self.button.clicked.connect(lambda state: button_click() if button_click != None else None)

        self.allLayout  = QtWidgets.QHBoxLayout()
        self.allLayout.addWidget(self.topicLabel, 0)
        self.allLayout.addWidget(self.button, 1)


        self.setLayout(self.allLayout)

        self.topicLabel.setStyleSheet('''
            color: rgb(0, 0, 255);
        ''')



    def mousePressEvent(self, event):
        print(event, self.topic)
        self.on_click(self.topic)



        
class Ui_MainWindow(object):

    topics = []
    hostname = None
    port = None
    new_message = False

    current_topic = None

    messages = {}

    def __init__(self) -> None:
        super().__init__()

        self.client = mqtt.Client()
        self.client.on_connect = lambda client, userdata, flags, rc : self.on_connect(client, userdata, flags, rc)
        self.client.on_message = lambda client, userdata, msg : self.on_message(client, userdata, msg)

    def on_connect(self, client, userdata, flags, rc):
        print("Connected with result code "+str(rc))

        self.main_widget.setCurrentIndex(0)
        self.disconnect_button.setEnabled(True)
        self.connect_button.setEnabled(False)

    # The callback for when a PUBLISH message is received from the server.
    def on_message(self, client, userdata, msg):
        
        print(client, userdata, msg)
        if not msg.topic in self.messages:
            self.messages[msg.topic] = []
        
        self.messages[msg.topic].append({"client": client, "userdata": userdata, "msg": msg})
        while len(self.messages[msg.topic]) > 100:
            
            del self.messages[msg.topic][0]
        # self.show_topic(msg.topic, skipShow=True)
        # print(msg.topic+" "+str(msg.payload))
        self.new_message = True

    def connect_click(self):

        hostname = self.connect_hostname.toPlainText()
        port = int(self.connect_port.toPlainText())
        
        if hostname == None or port == None or not isinstance(port, int):
            return
        print(F"Connecting to host: {hostname} and port: {port}")
        self.client.connect(hostname, port, 60)
        self.client.loop_start()


    def disconnect_click(self):
        self.client.disconnect()
        self.client.loop_stop(force=False)
        self.hostname = None
        self.port = None
        self.disconnect_button.setEnabled(False)
        self.connect_button.setEnabled(True)
        self.main_widget.setCurrentIndex(1)

    def subscribe(self):
        topic = str(self.subscription_input.currentText())
        if topic == None or topic == "" or any(topic in s for s in self.topics):
            return

        self.client.subscribe(topic, 0)

        self.topics.append(topic)


        self.update_subscriptions()

    def update_messages(self):
        if self.current_topic != None and self.new_message == True:
            self.show_topic(self.current_topic)
        

    def update_subscriptions(self):

        self.subscriptions.clear()

        for topic in self.topics:
            # Create TopicWidget
            myTopicWidget = TopicWidget(
                topic, 
                button_click=lambda: self.unsubscribe(topic),
                button_label="Unsubscribe",
                on_click=lambda topic: self.show_topic(topic)
            )

            topicWidget = QtWidgets.QListWidgetItem(self.subscriptions)
            topicWidget.setSizeHint(myTopicWidget.sizeHint())
            self.subscriptions.addItem(topicWidget)
            self.subscriptions.setItemWidget(topicWidget, myTopicWidget)
        self.update_combo()

    def unsubscribe(self, topic):

        self.client.unsubscribe(topic)
        if topic in self.topics: self.topics.remove(topic)
        self.update_subscriptions()
        self.subscribe_message_text.setText("")
        self.subscribe_messages.clear()
        self.current_topic = None


    def show_topic(self, topic, skipShow = False):
        print(F"showing topic {topic}")
        self.current_topic = topic


        self.subscribe_messages.clear()
        if topic not in self.messages:
            return

            
        for index, message in reversed(list(enumerate(self.messages[topic]))):
            widget = MessageWidget(
                message= message,
                index = index,
                on_click=lambda message: self.show_message(message)
            )

            messageWidget = QtWidgets.QListWidgetItem(self.subscribe_messages)
            messageWidget.setSizeHint(widget.sizeHint())
            self.subscribe_messages.addItem(messageWidget)
            self.subscribe_messages.setItemWidget(messageWidget, widget)
        if skipShow:
            return
        if len(self.messages[topic]) == 0:
            return
        self.show_message(self.messages[topic][len(self.messages[topic]) - 1])

        # self.timer.timeout.connect(lambda state: self.show_topic(topic))



    def show_message(self, message):
        self.subscribe_message_text.setText("")
        self.subscribe_message_text.setText(str(message["msg"].payload))
        self.new_message = False

    def update_combo(self):


        self.publish_input.clear()
        self.publish_input.addItems(self.topics)
        self.subscription_input.clear()
        self.subscription_input.addItems(self.topics + ["pi/time"])

    def publish(self):
        payload = self.publish_text.toPlainText() or ""
        topic = str(self.publish_input.currentText())
        
        if topic == None or payload == None:
            return
        self.update_combo()
        self.client.publish(topic, payload)



    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 572)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.connect_button = QtWidgets.QPushButton(self.centralwidget)
        self.connect_button.setGeometry(QtCore.QRect(360, 30, 121, 31))
        self.connect_button.setObjectName("connect_button")
        self.connect_hostname = QtWidgets.QTextEdit(self.centralwidget)
        self.connect_hostname.setGeometry(QtCore.QRect(40, 30, 221, 31))
        self.connect_hostname.setObjectName("connect_hostname")
        self.main_widget = QtWidgets.QStackedWidget(self.centralwidget)
        self.main_widget.setGeometry(QtCore.QRect(20, 80, 761, 461))
        self.main_widget.setObjectName("main_widget")
        self.connected = QtWidgets.QWidget()
        self.connected.setObjectName("connected")
        self.menu_subscribe = QtWidgets.QPushButton(self.connected)
        self.menu_subscribe.setGeometry(QtCore.QRect(20, 0, 81, 31))
        self.menu_subscribe.setDefault(False)
        self.menu_subscribe.setFlat(True)
        self.menu_subscribe.setObjectName("menu_subscribe")
        self.menu_publish = QtWidgets.QPushButton(self.connected)
        self.menu_publish.setGeometry(QtCore.QRect(100, 0, 71, 31))
        self.menu_publish.setFlat(True)
        self.menu_publish.setObjectName("menu_publish")
        self.connected_widget = QtWidgets.QStackedWidget(self.connected)
        self.connected_widget.setGeometry(QtCore.QRect(-10, 50, 691, 391))
        self.connected_widget.setObjectName("connected_widget")
        self.Publish = QtWidgets.QWidget()
        self.Publish.setObjectName("Publish")
        self.publish_input = QtWidgets.QComboBox(self.Publish)
        self.publish_input.setGeometry(QtCore.QRect(30, 0, 221, 31))
        self.publish_input.setAcceptDrops(False)
        self.publish_input.setAutoFillBackground(False)
        self.publish_input.setEditable(True)
        self.publish_input.setObjectName("publish_input")
        self.publish_button = QtWidgets.QPushButton(self.Publish)
        self.publish_button.setGeometry(QtCore.QRect(270, 0, 121, 31))
        self.publish_button.setCheckable(False)
        self.publish_button.setAutoDefault(False)
        self.publish_button.setDefault(False)
        self.publish_button.setFlat(False)
        self.publish_button.setObjectName("publish_button")
        self.publish_text = QtWidgets.QTextEdit(self.Publish)
        self.publish_text.setGeometry(QtCore.QRect(30, 40, 361, 321))
        self.publish_text.setObjectName("publish_text")
        self.connected_widget.addWidget(self.Publish)
        self.Subscribe = QtWidgets.QWidget()
        self.Subscribe.setObjectName("Subscribe")
        self.subscribe_message_text = QtWidgets.QTextBrowser(self.Subscribe)
        self.subscribe_message_text.setGeometry(QtCore.QRect(370, 260, 301, 131))
        self.subscribe_message_text.setObjectName("subscribe_message_text")
        self.subscription_input = QtWidgets.QComboBox(self.Subscribe)
        self.subscription_input.setGeometry(QtCore.QRect(30, 0, 221, 31))
        self.subscription_input.setObjectName("subscription_input")
        self.subscription_input.setEditable(True)
        self.subscribe_button = QtWidgets.QPushButton(self.Subscribe)
        self.subscribe_button.setGeometry(QtCore.QRect(270, 0, 121, 31))
        self.subscribe_button.setObjectName("subscribe_button")
        self.subscribe_messages = QtWidgets.QListWidget(self.Subscribe)
        self.subscribe_messages.setGeometry(QtCore.QRect(370, 50, 301, 201))
        self.subscribe_messages.setObjectName("subscribe_messages")
        self.subscriptions = QtWidgets.QListWidget(self.Subscribe)
        self.subscriptions.setGeometry(QtCore.QRect(30, 50, 321, 341))
        self.subscriptions.setObjectName("subscriptions")
        self.connected_widget.addWidget(self.Subscribe)
        self.main_widget.addWidget(self.connected)
        self.disconnected = QtWidgets.QWidget()
        self.disconnected.setObjectName("disconnected")
        self.main_widget.addWidget(self.disconnected)
        self.disconnect_button = QtWidgets.QPushButton(self.centralwidget)
        self.disconnect_button.setGeometry(QtCore.QRect(490, 30, 121, 31))
        self.disconnect_button.setObjectName("disconnect_button")
        self.connect_port = QtWidgets.QTextEdit(self.centralwidget)
        self.connect_port.setGeometry(QtCore.QRect(270, 30, 81, 31))
        self.connect_port.setObjectName("connect_port")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.main_widget.setCurrentIndex(1)
        self.connected_widget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.connect_button.clicked.connect(lambda state: self.connect_click())
        self.disconnect_button.clicked.connect(lambda state: self.disconnect_click())
        self.disconnect_button.setEnabled(False)

        self.menu_subscribe.clicked.connect(lambda state:[ self.connected_widget.setCurrentIndex(1), self.update_subscriptions(), self.subscribe_messages.clear()])
        self.menu_publish.clicked.connect(lambda state:[ self.connected_widget.setCurrentIndex(0), self.update_subscriptions(), self.subscribe_messages.clear()])

        self.subscribe_button.clicked.connect(lambda state: self.subscribe())
        self.publish_button.clicked.connect(lambda state: self.publish())
        self.timer = QTimer()
        self.timer.setInterval(100)
        self.timer.timeout.connect(self.update_messages)
        self.timer.start()
        self.update_combo()
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.connect_button.setText(_translate("MainWindow", "Connect"))
        self.connect_hostname.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">localhost</p></body></html>"))
        self.menu_subscribe.setText(_translate("MainWindow", "Subscribe"))
        self.menu_publish.setText(_translate("MainWindow", "Publish"))
        self.publish_button.setText(_translate("MainWindow", "Publish"))
        self.subscribe_button.setText(_translate("MainWindow", "Subscribe"))
        self.disconnect_button.setText(_translate("MainWindow", "Disconnect"))
        self.connect_port.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">1883</p></body></html>"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
